// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  /// Rust function that retrieves the username of the current user by executing a terminal command.
  /// It utilizes the underlying operating system's capabilities to obtain the username.
  /// Returns a string value.
  ///
  /// ### Example
  /// ```rust
  /// fn main() {
  ///     let username = get_username(); // returns current user's username
  ///     println!("Hello, {}!", username);
  /// }
  /// ```
  Future<String> getUsername({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUsernameConstMeta;

  /// Rust function that uses the sudo command to elevate privilege.
  /// Takes in a password as a String argument to grant access to the root folder.
  ///
  /// ### Return Values
  /// - Returns Some(String) if the function was successfullt executed and the proper rights have been granted.
  /// - Returns None if the function fails to execute correctly and the proper rights have not been given to the administrator.
  ///
  /// ### Example
  /// ```rust
  /// fn main() {
  ///     let return_statement = print_root_folder("pass1234".to_string());
  ///     println("{:?}", return_statement); // prints the output statement provided the password is correct or throws an error.
  /// }
  /// ```
  Future<String?> printRootFolder({required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrintRootFolderConstMeta;

  Future<String?> checkPolkit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckPolkitConstMeta;
}
